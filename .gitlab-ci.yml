stages:
  - lint_build

lint:
  image: python:3.9  # Use a default Python image for linting
  stage: lint_build
  script:
    - pip install pylint pylint-exit
    - echo CI_COMMIT_SHA=${CI_COMMIT_SHA}
    - echo CI_MERGE_REQUEST_TARGET_BRANCH_NAME=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
    - git fetch origin ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
    - FILES=$(git diff --name-only ${CI_COMMIT_SHA} origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} | grep '\.py'$)
    - echo "Changed files are $FILES"
    - mkdir -p ./pylint
    - |
      if [ -z "$FILES" ]; then
        echo "No Python files to lint."
      else
        pylint --output-format=text $FILES | tee ./pylint/pylint.log
        SCORE=$(pylint --output-format=text $FILES | tail -2 | grep -oP '\d+\.\d+' | head -1)
        echo "Pylint score: $SCORE"
        if (( $(echo "$SCORE < 9" | bc -l) )); then
          echo "Warning: Some files have a pylint score less than 9!"
        fi
        pylint-exit ${PIPESTATUS[0]}
      fi
  only:
    - merge_requests  # Only run this job for merge requests
    - main            # Also run on pushes to the main branch

train:
  image: continuumio/miniconda3  # Use Miniconda image for training
  stage: lint_build
  script:
    - conda env create -f environment.yml || conda env update -f environment.yml
    - source activate rel-mm
    - echo "Activated the Conda environment."
    - python self_supervised.py --testing=True  # Assuming you have a training script named this way
  only:
    - merge_requests  # Only run this job for merge requests
    - main            # Also run on pushes to the main branch
